{"ast":null,"code":"var _jsxFileName = \"/home/al/DEVELOPPEMENT/MyEvent2021/frontend/src/screens/HomePage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport GetGeoLocation from \"../components/GetGeoLocation\";\nimport CityList from \"../components/CityList\"; ///////////////////////////////////////////////////\n\nimport DistanceList from \"../components/DistanceList\"; ///////////////////////////////////////////////////\n\nimport MyNav from \"../components/navBar\";\nimport \"../App.css\";\nimport { Row, Col, Container, Button, Form } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction HomePage() {\n  _s();\n\n  const [events, setEvents] = useState(false);\n  const [eventsFiltred, setEventsFiltred] = useState(false);\n  const [dist, setDist] = useState(1000);\n  const [curentDate, setCurentDate] = useState(1000);\n  const gps = GetGeoLocation();\n  const [city, setCity] = useState(\"Les evenements autour de moi\");\n  const [dataTags, setDataTags] = useState(false);\n  /* const [token, setToken] = useState(false);\n    const handleChange = ({ currentTarget }) => {\n     const { name, value } = currentTarget;\n     setMessage({ ...message, [name]: value });\n   };\n    const [isMobile, setIsMobile] = useState(false)\n  \n   //choose the screen size \n   const handleResize = () => {\n     window.innerWidth <= 768 ? setIsMobile(true) : setIsMobile(false)\n   }\n    // create an event listener\n   useEffect(() => {\n     window.addEventListener(\"resize\", handleResize)\n   })*/\n\n  useEffect(() => {\n    var today = new Date();\n    var date = \"\";\n    date = today.getFullYear();\n    console.log(date);\n    setCurentDate(date); // getEvent();\n\n    /* let token = (JSON.parse(window.localStorage.getItem(\"userInfo\")).token);\n     if(token){\n       setToken(token);\n       console.log(token);\n       getSeries(token)\n       setLoading(false);\n     }else{\n       // pas de user\n     }*/\n  }, []);\n\n  const creatArrayTags = data => {\n    var tempo = \"\";\n    data.forEach(element => {\n      tempo = tempo + element.fields.tags;\n      tempo = tempo + \",\";\n    });\n    tempo = tempo.replaceAll(',,', ',');\n    tempo = tempo.replaceAll(',undefined', '');\n    tempo = tempo.replaceAll('\"', '');\n    let array = tempo.split(',');\n    array.sort();\n    array.shift();\n    const counts = {};\n    let array2 = [];\n    var sortable = [];\n    array.forEach(function (x) {\n      counts[x] = (counts[x] || 0) + 1;\n    });\n\n    for (var event in counts) {\n      sortable.push([event, counts[event]]);\n    }\n\n    sortable.sort(function (a, b) {\n      return a[1] - b[1];\n    });\n    array2 = sortable.reverse();\n    setDataTags(array2);\n  };\n\n  const getEventByCoord = async () => {\n    try {\n      const response = await axios.get(\"https://public.opendatasoft.com/api/records/1.0/search/?dataset=evenements-publics-cibul&q=date_start>=+\" + curentDate + \"&sort=-date_start&rows=-1&facet=&geofilter.distance=\" + gps.coordinates.lat + \"%2C+\" + gps.coordinates.lng + \"%2C\" + dist);\n      creatArrayTags(response.data.records);\n      setEvents(response.data.records);\n      setEventsFiltred(response.data.records);\n    } catch (error) {\n      console.log(error.response);\n    }\n  };\n\n  const getEventByCity = async () => {\n    try {\n      const response = await axios.get(\"https://public.opendatasoft.com/api/records/1.0/search/?dataset=evenements-publics-cibul&q=date_start>=+\" + curentDate + \"&sort=-date_start&refine.city=\" + (city.toLowerCase().charAt(0).toUpperCase() + city.slice(1)));\n      creatArrayTags(response.data.records);\n      setEvents(response.data.records);\n      setEventsFiltred(response.data.records);\n    } catch (error) {\n      console.log(error.response);\n    }\n  };\n\n  const setPossition = () => {\n    if (city === \"Les evenements autour de moi\") {\n      if (gps.loaded === false) {\n        alert(\"Veuillez d'abord accepter ou refuser le partage de vos coordonées avant de continuer.\");\n      } else {\n        if (gps.error) {\n          console.log(gps.error.message);\n          alert(\"Vous avez refusé le partage de coordonées, vous pouvez malgré tout chercher les evenements par villes. Si c'est une erreur veuillez recharger la page\");\n        } else {\n          console.log(gps.coordinates.lat);\n          console.log(gps.coordinates.lng);\n          getEventByCoord();\n        }\n      }\n    } else {\n      getEventByCity();\n    }\n  };\n\n  const onchangeListCity = data => {\n    setCity(data);\n    console.log(data);\n  }; ///////////////////////////////////////////////////\n\n\n  const onchangeDistlist = data => {\n    setDist(data);\n  }; ///////////////////////////////////////////////////\n  //todo retirer event, we just need filtred events all time\n\n\n  const filtreType = e => {\n    if (e.target.value !== \"null\") {\n      const arrayTempo = [];\n      events.forEach(event => {\n        if (event.fields.tags) {\n          arrayTempo.push(event);\n        }\n      }); //   console.log(arrayTempo)\n\n      const result = arrayTempo.filter((event, i) => event.fields.tags.includes(e.target.value));\n      console.log(result);\n      setEventsFiltred(result);\n    } else {\n      setEventsFiltred(events);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MyNav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"eventAvenir\",\n        children: \"\\xC9v\\xE9nements \\xE0 venir\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), gps.loaded && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Filtres\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this), dataTags && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"typeFiltre-select\",\n            children: \"Choisissez un type d'evenement :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"typeFiltre-select\",\n            onChange: filtreType,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"null\",\n              children: \"-- Tous --\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 17\n            }, this), dataTags && dataTags.map((data, i) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: data[0],\n              children: data[0] + \" : \" + data[1]\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 21\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(CityList, {\n          data: city,\n          onchange: e => {\n            onchangeListCity(e);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"text\",\n          value: city,\n          placeholder: \"Entrez le nom d'une ville\",\n          onChange: e => setCity(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(DistanceList, {\n          data: dist,\n          onchange: e => {\n            onchangeDistlist(e);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btn-setPosition\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-info\",\n            onClick: () => setPossition(),\n            children: \"Rechercher\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) || /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"lds-ellipsis\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            children: \"En chargement ...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: eventsFiltred && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: eventsFiltred.map((event, i) => /*#__PURE__*/_jsxDEV(Row, {\n          className: \"events-list-container w-100\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"events-list\",\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                className: \"desc\",\n                children: event.fields.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"gras\",\n                children: \"Dates :\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 23\n              }, this), \" \", event.fields.date_start, \" ~ \", event.fields.date_end]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"gras\",\n                children: \"Localit\\xE9 :\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 23\n              }, this), \" \", event.fields.city]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 21\n            }, this), event.fields.image && /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: event.fields.image,\n                alt: \"affiche de l'event\",\n                width: \"250\",\n                height: \"200\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 23\n            }, this) || /*#__PURE__*/_jsxDEV(Col, {\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: require(\"../defaultposter.png\"),\n                alt: \"\",\n                width: \"250\",\n                height: \"200\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: event.fields.free_text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 19\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 17\n        }, this))\n      }, void 0, false) || /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          className: \"events-list-container w-100\",\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            className: \"event-list\",\n            children: [\"Les events par defaut (ex: Paris) ou les plus recents\", /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"../defaultposter.png\",\n              alt: \"\",\n              width: \"250\",\n              height: \"200\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 15\n        }, this)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n}\n\n_s(HomePage, \"ywBFJYP+3IcqM4oFkvuK7FKa9ZM=\");\n\n_c = HomePage;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["/home/al/DEVELOPPEMENT/MyEvent2021/frontend/src/screens/HomePage.js"],"names":["React","useState","useEffect","axios","GetGeoLocation","CityList","DistanceList","MyNav","Row","Col","Container","Button","Form","HomePage","events","setEvents","eventsFiltred","setEventsFiltred","dist","setDist","curentDate","setCurentDate","gps","city","setCity","dataTags","setDataTags","today","Date","date","getFullYear","console","log","creatArrayTags","data","tempo","forEach","element","fields","tags","replaceAll","array","split","sort","shift","counts","array2","sortable","x","event","push","a","b","reverse","getEventByCoord","response","get","coordinates","lat","lng","records","error","getEventByCity","toLowerCase","charAt","toUpperCase","slice","setPossition","loaded","alert","message","onchangeListCity","onchangeDistlist","filtreType","e","target","value","arrayTempo","result","filter","i","includes","map","description","date_start","date_end","image","require","free_text"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport GetGeoLocation from \"../components/GetGeoLocation\";\nimport CityList from \"../components/CityList\";\n///////////////////////////////////////////////////\nimport DistanceList from \"../components/DistanceList\";\n///////////////////////////////////////////////////\nimport MyNav from \"../components/navBar\";\nimport \"../App.css\";\nimport {\n  Row,\n  Col,\n  Container,\n  Button,\n  Form,\n} from \"react-bootstrap\";\n\n\nfunction HomePage() {\n  const [events, setEvents] = useState(false);\n  const [eventsFiltred, setEventsFiltred] = useState(false);\n  const [dist, setDist] = useState(1000);\n  const [curentDate, setCurentDate] = useState(1000);\n\n  const gps = GetGeoLocation();\n  const [city, setCity] = useState(\"Les evenements autour de moi\");\n  const [dataTags, setDataTags] = useState(false);\n  \n /* const [token, setToken] = useState(false);\n\n  const handleChange = ({ currentTarget }) => {\n    const { name, value } = currentTarget;\n    setMessage({ ...message, [name]: value });\n  };\n\n  const [isMobile, setIsMobile] = useState(false)\n \n  //choose the screen size \n  const handleResize = () => {\n    window.innerWidth <= 768 ? setIsMobile(true) : setIsMobile(false)\n  }\n\n  // create an event listener\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize)\n  })*/\n\n  useEffect(() => {\n    var today = new Date();\n    var date = \"\";\n    date = today.getFullYear();\n    console.log(date);\n    setCurentDate(date);\n   // getEvent();\n   /* let token = (JSON.parse(window.localStorage.getItem(\"userInfo\")).token);\n    if(token){\n      setToken(token);\n      console.log(token);\n      getSeries(token)\n      setLoading(false);\n    }else{\n      // pas de user\n    }*/\n  }, []);\n\n  const creatArrayTags = (data) => {\n    var tempo = \"\";\n    data.forEach((element) => {\n      tempo = tempo + element.fields.tags;\n      tempo = tempo + \",\";\n    });\n    tempo = tempo.replaceAll(',,', ',');\n    tempo = tempo.replaceAll(',undefined', '');\n    tempo = tempo.replaceAll('\"', '');\n    let array = tempo.split(',');\n    array.sort();\n    array.shift();\n\n    const counts = {};\n    let array2 = [];\n    var sortable = [];\n\n    array.forEach(function (x) { counts[x] = (counts[x] || 0) + 1; });\n    for (var event in counts) {\n        sortable.push([event, counts[event]]);\n    }\n    sortable.sort(function(a, b) {\n        return a[1] - b[1];\n    });\n    array2 = sortable.reverse();\n    setDataTags(array2);\n  }\n\n\n  const getEventByCoord = async () => {\n    try {\n      const response = await axios.get(\"https://public.opendatasoft.com/api/records/1.0/search/?dataset=evenements-publics-cibul&q=date_start>=+\"+curentDate+\"&sort=-date_start&rows=-1&facet=&geofilter.distance=\"+gps.coordinates.lat+\"%2C+\"+gps.coordinates.lng+\"%2C\"+dist);\n      creatArrayTags(response.data.records);\n      setEvents(response.data.records)\n      setEventsFiltred(response.data.records);\n    } catch (error) {\n      console.log(error.response);\n    }\n  }\n\n  const getEventByCity = async () => {\n    try {\n      const response = await axios.get(\"https://public.opendatasoft.com/api/records/1.0/search/?dataset=evenements-publics-cibul&q=date_start>=+\"+curentDate+\"&sort=-date_start&refine.city=\"+(city.toLowerCase().charAt(0).toUpperCase() + city.slice(1)));\n \n      creatArrayTags(response.data.records);\n      setEvents(response.data.records)\n      setEventsFiltred(response.data.records);\n    } catch (error) {\n      console.log(error.response);\n    }\n  }\n\n  const setPossition = () => {\n    if (city === \"Les evenements autour de moi\") {\n      if (gps.loaded === false) {\n        alert(\"Veuillez d'abord accepter ou refuser le partage de vos coordonées avant de continuer.\")\n      }else{\n        if (gps.error) {\n          console.log(gps.error.message)\n          alert(\"Vous avez refusé le partage de coordonées, vous pouvez malgré tout chercher les evenements par villes. Si c'est une erreur veuillez recharger la page\")\n        }\n        else{\n          console.log(gps.coordinates.lat)\n          console.log(gps.coordinates.lng)\n          getEventByCoord()\n        }\n      }\n    }else{\n      getEventByCity();\n    }\n  }\n\n  const onchangeListCity = (data) => {\n    setCity(data)\n    console.log(data);\n  }\n///////////////////////////////////////////////////\n  const onchangeDistlist = (data) => {setDist(data)}\n///////////////////////////////////////////////////\n//todo retirer event, we just need filtred events all time\n  const filtreType = (e) => {\n    if (e.target.value !== \"null\") {\n        const arrayTempo = []\n        events.forEach((event) => {\n          if (event.fields.tags) {\n            arrayTempo.push(event);\n          }\n        });\n    //   console.log(arrayTempo)\n        const result = arrayTempo.filter((event, i) => \n            event.fields.tags.includes(e.target.value)\n        );\n        console.log(result);\n        setEventsFiltred(result);\n    }else{\n      setEventsFiltred(events);\n    }\n  }\n\n\n\n  return (\n    <div>\n      <MyNav />\n\n      <div>\n        <h1 className=\"eventAvenir\">Événements à venir</h1>\n        {gps.loaded &&\n          <>\n            <h4>Filtres</h4>\n            {dataTags &&\n            <>\n              <label htmlFor=\"typeFiltre-select\">Choisissez un type d'evenement :</label>\n              <select name=\"typeFiltre-select\" onChange={filtreType}>\n                <option value=\"null\">-- Tous --</option>\n                  {dataTags && dataTags.map((data, i) =>\n                    <option key={i} value={data[0]}>{data[0] + \" : \" + data[1]}</option>\n                  )}\n              </select>\n            </>\n            }\n\n            <CityList data={city} onchange={(e) => {onchangeListCity(e); }}/>\n            <Form.Control\n                type=\"text\"\n                value={city}\n                placeholder=\"Entrez le nom d'une ville\"\n                onChange={(e) => setCity(e.target.value)}\n              />\n            <DistanceList data={dist} onchange={(e) => {onchangeDistlist(e); }}/>\n            <div className=\"btn-setPosition\">\n              <Button variant=\"outline-info\" onClick={() => setPossition()}>\n                Rechercher\n              </Button>\n            </div>\n          </>\n          ||\n          <>\n            \n            <Row>\n              <Col>\n                <div class=\"lds-ellipsis\">\n                  <div></div>\n                  <div></div>\n                  <div></div>\n                  <div></div>\n                </div>\n              </Col>\n              <Col>\n                En chargement ...\n              </Col>\n            </Row>\n\n\n          </>\n        }\n      </div>\n\n      <Container>\n            {eventsFiltred &&\n              <>\n              { eventsFiltred.map((event, i) =>\n                <Row key={i} className=\"events-list-container w-100\">\n                  <div className=\"events-list\">\n                    <Col>\n                      <h4 className=\"desc\">{event.fields.description}</h4>\n                    </Col>\n                    <Col>\n                      <span className=\"gras\">Dates :</span>{\" \"}\n                      {event.fields.date_start} ~ {event.fields.date_end}\n                    </Col>\n                    <Col>\n                      <span className=\"gras\">Localité :</span> {event.fields.city}\n                    </Col>\n                    {event.fields.image &&\n                      <Col>\n                        <img src={event.fields.image} alt=\"affiche de l'event\" width=\"250\" height=\"200\" />\n                      </Col>\n                    ||\n                      <Col>\n                        <img src={require(\"../defaultposter.png\")} alt=\"\" width=\"250\" height=\"200\" />\n                      </Col>\n                    }\n                    <p>{event.fields.free_text}</p>\n                  </div>\n                </Row>\n              )}\n              </>\n              ||\n              <>\n              <Row className=\"events-list-container w-100\">\n                  <Col className=\"event-list\">\n                    Les events par defaut (ex: Paris) ou les plus recents\n                    <img src=\"../defaultposter.png\" alt=\"\" width=\"250\" height=\"200\" />\n                  </Col>\n              </Row>\n              </>\n            }\n      </Container>\n    </div>\n  );\n}\n\nexport default HomePage;"]},"metadata":{},"sourceType":"module"}